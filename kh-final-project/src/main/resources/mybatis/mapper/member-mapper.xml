<?xml version="1.0" encoding="UTF-8" ?> 

<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="member">
<!--  id 중복체크-->
	<select id = "checkId" parameterType = "String" resultType = "MemberDto">
	select * from member where member_id = #{memberId}
	</select>

<!--  email 중복체크-->
	<select id = "checkEmail" parameterType = "String" resultType = "MemberDto">
	select * from member where member_email = #{memberEmail}
	</select>

<!-- 	 번호 생성 구문
	<select id="sequence" resultType="int">
		select member_seq.nextval from dual
	</select> -->

<!--  가입 구문-->
	<insert id = "insert" parameterType = "MemberDto">
		INSERT INTO member(member_no,member_id,member_pw,member_nick,member_email)
		VALUES(member_seq.nextval,#{memberId},#{memberPw},#{memberNick},#{memberEmail})
	</insert>
	
	<insert id ="msgInsert" parameterType ="MessageDto">
		INSERT INTO message(msg_no,sender_no,msg_title,msg_content,msg_date,receiver_no)
		VALUES(msg_seq.nextval,#{senderNo},#{msgTitle},#{msgContent},sysdate,#{receiverNo})
	</insert>
	
<!-- 		<select id="get" resultType="MemberDto" parameterType="int">
		select * from member where member_no = #{memberNo}
	</select> -->
<!-- 	이메일로 아이디찾기 -->
	<select id="getId" parameterType ="MemberDto" resultType="MemberDto">
		select member_id from member where member_email = #{memberEmail}
	</select>
	
	<select id="getMsg" parameterType="MessageDto" resultType="MessageDto">
		select * from message where msg_no = #{msgNo}
	</select>
	
<!-- 	발송메시지함 -->
	<select id="msgSendByMemberNo" parameterType="int" resultType="MessageDto">
		select * from message where sender_no = #{memberNo}
	</select>
<!-- 	받은메시지함 -->
	<select id="msgReceiverByMemberNo" parameterType="int" resultType="MessageDto">
		select * from message where receiver_no = #{memberNo}
	</select>
<!-- 	전체 메시지함 -->
	<select id="msgAllByMemberNo" parameterType="int" resultType="MessageDto">
		select * from message where sender_no = #{memberNo}
		union
		select * from message where receiver_no = #{memberNo}
	</select>
<!-- 	로그인 구문 -->
	<!-- 로그인 -->
	<select id="login" parameterType="MemberDto" resultType="MemberDto">
		select * from member 
		where member_id = #{memberId} and member_pw = #{memberPw}
	</select>
	
<!-- 	비밀번호 초기화 구문 -->
	<update id="pwUp" parameterType="MemberDto">
		update member set member_pw = #{memberPw} where member_email = #{memberEmail}
	</update>
	
<!-- 이메일 인증키 저장 구문 -->
	<insert id="insert2" parameterType="EmailAuthDto">
		
		merge into email_auth C using dual on(#{email} = C.email)
		when matched then
			update set C.no = #{no} , C.time = sysdate
		when not matched then
			insert(email, no, time) values(#{email}, #{no}, sysdate)
	</insert>
	<!-- 유효키 검사 -->
	<select id="check" parameterType="EmailAuthDto" resultType="EmailAuthDto">
		<![CDATA[
			select * from email_auth 
			where 
				email = #{email} 
				and 
				no = #{no} 
				and 
				time >= sysdate - 5 / 24 / 60
		]]>
	</select>
	
	<!-- 시간지나면 삭제 -->
	<delete id="deleteByEmail" parameterType="string">
		delete email_auth where email = #{email}
	</delete>
	
	<!-- 인증번호 삽입 -->
<!-- 	<insert id = authKeyMake parameterType = "int">
	INSERT INTO()
	
	
	</insert> -->
	
	<!-- 인증번호 자동삭제 -->
	
	<delete id="deleteByTime">
		<![CDATA[ 
			delete email_auth where time < sysdate - 5/24/60
		]]>
	</delete>
	
	<select id="getByMemberNo" resultType="MemberDto" parameterType="int">
		select * from member where member_no = #{memberNo}
	</select>

	<update id="upEmail" parameterType="MemberDto">
		update member set member_email = #{memberEmail} where member_no =#{memberNo}
	</update>
	
	<update id="upPw2" parameterType="MemberDto">
		update member set member_pw = #{memberPw} where member_no=#{memberNo}
	</update>
	
	<update id="upIntro" parameterType="MemberDto">
		update member set member_introduce = #{memberIntroduce} where member_no=#{memberNo}
	</update>
	
	<update id="upNick" parameterType="MemberDto">
		update member set member_nick = #{memberNick} where member_no=#{memberNo}
	</update>
	
	<update id="upAddress" parameterType="MemberDto">
		update member set member_address = #{memberAddress} where member_no=#{memberNo}
	</update>
	
	<select id="getByMsgNo" parameterType="MessageDto" resultType="MessageDto">
		select * from project where msg_no = #{msgNo}
	</select> 
	

	<!-- 보유 포인트 조회 -->
	<select id = "getMemberHavePoint" resultType = "int" parameterType ="int">
		SELECT member_have_point FROM member WHERE member_no = #{memberNo}
	</select>
	
	<!-- 결제시 포인트 감소 -->
	<update id="usePoint" parameterType="SponsorDto">
		update member set member_have_point = member_have_point - #{sponsorAmount} where member_no = #{memberNo} 
	</update>
	
	<!-- 후원 취소시 포인트 증가 -->
	<update id="addPointBySponsorCancel" parameterType="SponsorDto">
		update member set member_have_point = member_have_point + #{sponsorAmount} where member_no = #{memberNo} 
	</update>
	

</mapper>
